



import java.util.List;
import java.util.Map;


/*
 * @file: UI.java
 * @purpose: User interface for PA2
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JLabel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Vector;
import java.util.Hashtable;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import java.util.LinkedList;
import java.util.Enumeration;


@SuppressWarnings("serial")
public class UI extends JFrame {
    
    private MusicManager mMngr;
    private UserManager uMngr;
    private User currUser;
    /**
     * Creates new form UI
     */
    public UI() {
        mMngr = new MusicManager();
        uMngr = new UserManager();
        initComponents();
    }
    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                libraryAvailabilityGroup = new javax.swing.ButtonGroup();
                songPermGroup = new javax.swing.ButtonGroup();
                searchGroup = new javax.swing.ButtonGroup();
                tabs = new javax.swing.JTabbedPane();
                libraryPanel = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                ownedList = new javax.swing.JList();
                jScrollPane2 = new javax.swing.JScrollPane();
                loanedList = new javax.swing.JList();
                jScrollPane3 = new javax.swing.JScrollPane();
                borrowedList = new javax.swing.JList();
                ownedLabel = new javax.swing.JLabel();
                borrowedLabel = new javax.swing.JLabel();
                loanedLabel = new javax.swing.JLabel();
                takeBackButton = new javax.swing.JButton();
                songPermButton = new javax.swing.JButton();
                anyoneRadio = new javax.swing.JRadioButton();
                friendsOnlyRadio = new javax.swing.JRadioButton();
                jLabel3 = new javax.swing.JLabel();
                addSongButton = new javax.swing.JButton();
                jButton2 = new javax.swing.JButton();
                createPlaylistButton = new javax.swing.JButton();
                playButton = new javax.swing.JButton();
                stopButton = new javax.swing.JButton();
                noAvailabilityRadio = new javax.swing.JRadioButton();
                currentlyPlayingLabel = new javax.swing.JLabel();
                sortButton = new javax.swing.JButton();
                addSongsToPlaylist = new javax.swing.JButton();
                songDetailsButton = new javax.swing.JButton();
                downloadSongButton = new javax.swing.JButton();
                playlistPanel = new javax.swing.JPanel();
                jScrollPane7 = new javax.swing.JScrollPane();
                playListList = new javax.swing.JList();
                deletePlaylistButton = new javax.swing.JButton();
                removeSongFromPlayListButton = new javax.swing.JButton();
                friendsPanel = new javax.swing.JPanel();
                jScrollPane4 = new javax.swing.JScrollPane();
                friendsList = new javax.swing.JList();
                removeFriendButton = new javax.swing.JButton();
                browseFriendsLibraryButton = new javax.swing.JButton();
                allUsersPanel = new javax.swing.JPanel();
                jScrollPane10 = new javax.swing.JScrollPane();
                AllOnlineUsersList = new javax.swing.JList();
                allOnlineUsersLabel = new javax.swing.JLabel();
                addAsFriendButton = new javax.swing.JButton();
                searchPanel = new javax.swing.JPanel();
                jScrollPane6 = new javax.swing.JScrollPane();
                searchList = new javax.swing.JList();
                friendsLibrariesRadio = new javax.swing.JRadioButton();
                allLibrariesRadio = new javax.swing.JRadioButton();
                ownLibraryRadio = new javax.swing.JRadioButton();
                searchInput = new javax.swing.JTextField();
                searchButton = new javax.swing.JButton();
                borrowButton = new javax.swing.JButton();
                friendRequestPanel = new javax.swing.JPanel();
                jScrollPane5 = new javax.swing.JScrollPane();
                invitesList = new javax.swing.JList();
                acceptButton = new javax.swing.JButton();
                declineButton = new javax.swing.JButton();
                borrowRequestPanel = new javax.swing.JPanel();
                jScrollPane8 = new javax.swing.JScrollPane();
                borrowRequestList = new javax.swing.JList();
                allowBorrowButton = new javax.swing.JButton();
                denyBorrowButton = new javax.swing.JButton();
                songPermPanel = new javax.swing.JPanel();
                jScrollPane9 = new javax.swing.JScrollPane();
                permList = new javax.swing.JList();
                trendingPanel = new javax.swing.JPanel();
                loginPane = new javax.swing.JPanel();
                titleLabel = new javax.swing.JLabel();
                usernameInput = new javax.swing.JTextField();
                passwordInput = new javax.swing.JPasswordField();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();
                loginButton = new javax.swing.JButton();
                logoutPane = new javax.swing.JPanel();
                logoutButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                ownedList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane1.setViewportView(ownedList);

                loanedList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane2.setViewportView(loanedList);

                borrowedList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane3.setViewportView(borrowedList);

                ownedLabel.setText("Owned Songs");

                borrowedLabel.setText("Borrowed Songs");

                loanedLabel.setText("Loaned Songs");

                takeBackButton.setText("Take Back Song");
                takeBackButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                takeBackButtonActionPerformed(evt);
                        }
                });

                songPermButton.setText("Set Song Permission");
                songPermButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                songPermButtonActionPerformed(evt);
                        }
                });

                libraryAvailabilityGroup.add(anyoneRadio);
                anyoneRadio.setSelected(true);
                anyoneRadio.setText("Anyone");
                anyoneRadio.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                anyoneRadioActionPerformed(evt);
                        }
                });

                libraryAvailabilityGroup.add(friendsOnlyRadio);
                friendsOnlyRadio.setText("Friends Only");
                friendsOnlyRadio.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                friendsOnlyRadioActionPerformed(evt);
                        }
                });

                jLabel3.setText("Library Availability");

                addSongButton.setText("Add Song");
                addSongButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                addSongButtonActionPerformed(evt);
                        }
                });

                jButton2.setText("Remove Song");
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton2ActionPerformed(evt);
                        }
                });

                createPlaylistButton.setText("Create Playlist");
                createPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                createPlaylistButtonActionPerformed(evt);
                        }
                });

                playButton.setText("Play Song");
                playButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                playButtonActionPerformed(evt);
                        }
                });

                stopButton.setText("Stop Song");
                stopButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                stopButtonActionPerformed(evt);
                        }
                });

                libraryAvailabilityGroup.add(noAvailabilityRadio);
                noAvailabilityRadio.setText("No One");
                noAvailabilityRadio.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                noAvailabilityRadioActionPerformed(evt);
                        }
                });

                sortButton.setText("Sort Songs");
                sortButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                sortButtonActionPerformed(evt);
                        }
                });

                addSongsToPlaylist.setText("Add Songs to Playlist");
                addSongsToPlaylist.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                addSongsToPlaylistActionPerformed(evt);
                        }
                });

                songDetailsButton.setText("Song Details");
                songDetailsButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                songDetailsButtonActionPerformed(evt);
                        }
                });

                downloadSongButton.setText("Download Song");

                javax.swing.GroupLayout libraryPanelLayout = new javax.swing.GroupLayout(libraryPanel);
                libraryPanel.setLayout(libraryPanelLayout);
                libraryPanelLayout.setHorizontalGroup(
                        libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addComponent(songPermButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(ownedLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, libraryPanelLayout.createSequentialGroup()
                                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(addSongsToPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(createPlaylistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(addSongButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(sortButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(songDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                                .addGap(5, 5, 5)
                                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(borrowedLabel)
                                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryPanelLayout.createSequentialGroup()
                                                                                        .addComponent(loanedLabel)
                                                                                        .addGap(203, 203, 203))
                                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryPanelLayout.createSequentialGroup()
                                                                                        .addComponent(takeBackButton)
                                                                                        .addGap(81, 81, 81)))
                                                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                                                .addComponent(anyoneRadio)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel3)
                                                                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                                                                .addComponent(friendsOnlyRadio)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(noAvailabilityRadio))))
                                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(downloadSongButton)
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addGap(65, 65, 65))))
                );
                libraryPanelLayout.setVerticalGroup(
                        libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(ownedLabel)
                                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(borrowedLabel)
                                                .addComponent(loanedLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(addSongButton)
                                                        .addComponent(jButton2)
                                                        .addComponent(takeBackButton)))
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(playButton)
                                                        .addComponent(stopButton))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(createPlaylistButton)
                                                                .addComponent(sortButton)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(addSongsToPlaylist)
                                                        .addComponent(songDetailsButton)
                                                        .addComponent(downloadSongButton))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(songPermButton)
                                                .addGap(57, 57, 57))
                                        .addGroup(libraryPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(anyoneRadio)
                                                        .addComponent(friendsOnlyRadio)
                                                        .addComponent(noAvailabilityRadio))))
                                .addContainerGap())
                );

                tabs.addTab("Library", libraryPanel);

                playListList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane7.setViewportView(playListList);

                deletePlaylistButton.setText("Delete Playlist");
                deletePlaylistButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                deletePlaylistButtonActionPerformed(evt);
                        }
                });

                removeSongFromPlayListButton.setText("Remove Song From Playlist");
                removeSongFromPlayListButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                removeSongFromPlayListButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout playlistPanelLayout = new javax.swing.GroupLayout(playlistPanel);
                playlistPanel.setLayout(playlistPanelLayout);
                playlistPanelLayout.setHorizontalGroup(
                        playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(playlistPanelLayout.createSequentialGroup()
                                .addGap(292, 292, 292)
                                .addGroup(playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(playlistPanelLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(deletePlaylistButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(removeSongFromPlayListButton))
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(290, Short.MAX_VALUE))
                );
                playlistPanelLayout.setVerticalGroup(
                        playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(playlistPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deletePlaylistButton)
                                        .addComponent(removeSongFromPlayListButton))
                                .addContainerGap(145, Short.MAX_VALUE))
                );

                tabs.addTab("Playlists", playlistPanel);

                friendsList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane4.setViewportView(friendsList);

                removeFriendButton.setText("RemoveFriend");
                removeFriendButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                removeFriendButtonActionPerformed(evt);
                        }
                });

                browseFriendsLibraryButton.setText("Browse Friends Library");
                browseFriendsLibraryButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                browseFriendsLibraryButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout friendsPanelLayout = new javax.swing.GroupLayout(friendsPanel);
                friendsPanel.setLayout(friendsPanelLayout);
                friendsPanelLayout.setHorizontalGroup(
                        friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(friendsPanelLayout.createSequentialGroup()
                                .addGroup(friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(friendsPanelLayout.createSequentialGroup()
                                                .addGap(187, 187, 187)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(friendsPanelLayout.createSequentialGroup()
                                                .addGap(288, 288, 288)
                                                .addComponent(browseFriendsLibraryButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(removeFriendButton)))
                                .addContainerGap(237, Short.MAX_VALUE))
                );
                friendsPanelLayout.setVerticalGroup(
                        friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(friendsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(removeFriendButton)
                                        .addComponent(browseFriendsLibraryButton))
                                .addContainerGap(228, Short.MAX_VALUE))
                );

                tabs.addTab("Friends", friendsPanel);

                AllOnlineUsersList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane10.setViewportView(AllOnlineUsersList);

                allOnlineUsersLabel.setText("All Online Users");

                addAsFriendButton.setText("Add User as Friend");
                addAsFriendButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                addAsFriendButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout allUsersPanelLayout = new javax.swing.GroupLayout(allUsersPanel);
                allUsersPanel.setLayout(allUsersPanelLayout);
                allUsersPanelLayout.setHorizontalGroup(
                        allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(allUsersPanelLayout.createSequentialGroup()
                                .addGroup(allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(allUsersPanelLayout.createSequentialGroup()
                                                .addGap(280, 280, 280)
                                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(allUsersPanelLayout.createSequentialGroup()
                                                .addGap(402, 402, 402)
                                                .addComponent(allOnlineUsersLabel))
                                        .addGroup(allUsersPanelLayout.createSequentialGroup()
                                                .addGap(384, 384, 384)
                                                .addComponent(addAsFriendButton)))
                                .addContainerGap(307, Short.MAX_VALUE))
                );
                allUsersPanelLayout.setVerticalGroup(
                        allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(allUsersPanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(allOnlineUsersLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addAsFriendButton)
                                .addContainerGap(166, Short.MAX_VALUE))
                );

                tabs.addTab("Online Users", allUsersPanel);

                searchList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane6.setViewportView(searchList);

                searchGroup.add(friendsLibrariesRadio);
                friendsLibrariesRadio.setText("Friends Libraries");

                searchGroup.add(allLibrariesRadio);
                allLibrariesRadio.setSelected(true);
                allLibrariesRadio.setText("All Libraries");

                searchGroup.add(ownLibraryRadio);
                ownLibraryRadio.setText("Own Library");

                searchButton.setText("Search");
                searchButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                searchButtonActionPerformed(evt);
                        }
                });

                borrowButton.setText("Borrow Song");
                borrowButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                borrowButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
                searchPanel.setLayout(searchPanelLayout);
                searchPanelLayout.setHorizontalGroup(
                        searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchPanelLayout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(searchPanelLayout.createSequentialGroup()
                                                .addComponent(allLibrariesRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(friendsLibrariesRadio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ownLibraryRadio))
                                        .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(295, Short.MAX_VALUE))
                );
                searchPanelLayout.setVerticalGroup(
                        searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(searchPanelLayout.createSequentialGroup()
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(searchPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                                        .addGroup(searchPanelLayout.createSequentialGroup()
                                                .addGap(159, 159, 159)
                                                .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(allLibrariesRadio)
                                        .addComponent(friendsLibrariesRadio)
                                        .addComponent(ownLibraryRadio))
                                .addGap(15, 15, 15))
                );

                tabs.addTab("Search Libraries", searchPanel);

                invitesList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane5.setViewportView(invitesList);

                acceptButton.setText("Accept");
                acceptButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                acceptButtonActionPerformed(evt);
                        }
                });

                declineButton.setText("Decline");
                declineButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                declineButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout friendRequestPanelLayout = new javax.swing.GroupLayout(friendRequestPanel);
                friendRequestPanel.setLayout(friendRequestPanelLayout);
                friendRequestPanelLayout.setHorizontalGroup(
                        friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(friendRequestPanelLayout.createSequentialGroup()
                                .addGroup(friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(friendRequestPanelLayout.createSequentialGroup()
                                                .addGap(219, 219, 219)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(friendRequestPanelLayout.createSequentialGroup()
                                                .addGap(376, 376, 376)
                                                .addComponent(acceptButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(declineButton)))
                                .addContainerGap(204, Short.MAX_VALUE))
                );
                friendRequestPanelLayout.setVerticalGroup(
                        friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(friendRequestPanelLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(acceptButton)
                                        .addComponent(declineButton))
                                .addContainerGap(161, Short.MAX_VALUE))
                );

                tabs.addTab("Friend Requests", friendRequestPanel);

                borrowRequestList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane8.setViewportView(borrowRequestList);

                allowBorrowButton.setText("Allow");
                allowBorrowButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                allowBorrowButtonActionPerformed(evt);
                        }
                });

                denyBorrowButton.setText("Deny");
                denyBorrowButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                denyBorrowButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout borrowRequestPanelLayout = new javax.swing.GroupLayout(borrowRequestPanel);
                borrowRequestPanel.setLayout(borrowRequestPanelLayout);
                borrowRequestPanelLayout.setHorizontalGroup(
                        borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                                .addGroup(borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                                                .addGap(394, 394, 394)
                                                .addComponent(allowBorrowButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(denyBorrowButton))
                                        .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                                                .addGap(297, 297, 297)
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(323, Short.MAX_VALUE))
                );
                borrowRequestPanelLayout.setVerticalGroup(
                        borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(denyBorrowButton)
                                        .addComponent(allowBorrowButton))
                                .addContainerGap(212, Short.MAX_VALUE))
                );

                tabs.addTab("Borrow Requests", borrowRequestPanel);

                permList.setModel(new javax.swing.AbstractListModel() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                        public int getSize() { return strings.length; }
                        public Object getElementAt(int i) { return strings[i]; }
                });
                jScrollPane9.setViewportView(permList);

                javax.swing.GroupLayout songPermPanelLayout = new javax.swing.GroupLayout(songPermPanel);
                songPermPanel.setLayout(songPermPanelLayout);
                songPermPanelLayout.setHorizontalGroup(
                        songPermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(songPermPanelLayout.createSequentialGroup()
                                .addGap(263, 263, 263)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(252, Short.MAX_VALUE))
                );
                songPermPanelLayout.setVerticalGroup(
                        songPermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(songPermPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(53, Short.MAX_VALUE))
                );

                tabs.addTab("Song Permissions", songPermPanel);

                javax.swing.GroupLayout trendingPanelLayout = new javax.swing.GroupLayout(trendingPanel);
                trendingPanel.setLayout(trendingPanelLayout);
                trendingPanelLayout.setHorizontalGroup(
                        trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 936, Short.MAX_VALUE)
                );
                trendingPanelLayout.setVerticalGroup(
                        trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 493, Short.MAX_VALUE)
                );

                tabs.addTab("Trending", trendingPanel);

                titleLabel.setText("Music Sharing Application");

                jLabel1.setText("UserName:");

                jLabel2.setText("Password:");

                loginButton.setText("Login");
                loginButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                loginButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout loginPaneLayout = new javax.swing.GroupLayout(loginPane);
                loginPane.setLayout(loginPaneLayout);
                loginPaneLayout.setHorizontalGroup(
                        loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(loginPaneLayout.createSequentialGroup()
                                .addContainerGap(62, Short.MAX_VALUE)
                                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)
                                                .addComponent(loginButton)
                                                .addGap(226, 226, 226))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                                                .addComponent(titleLabel)
                                                .addGap(272, 272, 272))))
                );
                loginPaneLayout.setVerticalGroup(
                        loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(loginPaneLayout.createSequentialGroup()
                                .addComponent(titleLabel)
                                .addGap(29, 29, 29)
                                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addComponent(loginButton))
                                .addContainerGap(50, Short.MAX_VALUE))
                );

                logoutButton.setText("Logout");
                logoutButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                logoutButtonActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout logoutPaneLayout = new javax.swing.GroupLayout(logoutPane);
                logoutPane.setLayout(logoutPaneLayout);
                logoutPaneLayout.setHorizontalGroup(
                        logoutPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(logoutPaneLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(logoutButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );
                logoutPaneLayout.setVerticalGroup(
                        logoutPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logoutPaneLayout.createSequentialGroup()
                                .addContainerGap(37, Short.MAX_VALUE)
                                .addComponent(logoutButton)
                                .addGap(30, 30, 30))
                );

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(logoutPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 944, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(31, 31, 31))))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(logoutPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        String username = usernameInput.getText();
        char[] p = passwordInput.getPassword();
        String password = new String(p);
        currUser = uMngr.findUser(username);
        if(currUser != null && currUser.checkPassword(password.toString()))
        {
            this.tabs.setVisible(true);
            this.logoutPane.setVisible(true);
            //this.loginPane.setVisible(false);
            
            this.friendsList.setListData(currUser.getFriendList().toArray());
            
            this.ownedList.setListData(currUser.getLibrary().owned().toArray());
            this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
            this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
            
            this.invitesList.setListData(currUser.getInvites().toArray());
            
            Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
            Vector<String> tmp = new Vector<String>();
            for(Map.Entry<String, Library> entry: playlists.entrySet())
            {
                tmp.add(entry.getKey());
                List<Song> tmpSongs = entry.getValue().owned();
                for(Song s : tmpSongs)
                {
                    tmp.add("  " + s.toString());
                }
            }   
            playListList.setListData(tmp.toArray());
	    
	    Hashtable<String, User> users = uMngr.getUsers();
        Set<String> keys = users.keySet();
        Vector<Song> tmp2 = new Vector<Song>();
        for(String key : keys)
        {
//            tmp.add(key);
            User u = uMngr.findUser(key);
            if(u.getPerm() != PermType.NONE || (u.getPerm() == PermType.FRIENDS && !currUser.isFriendsWith(u)))
            {
                List<Song> owned = u.getLibrary().owned();
                for(Song s : owned)
                {
    //                tmp.add(" " + s.toString());
                    tmp2.add(s);
                }
            }
            this.searchList.setListData(tmp.toArray());
        }
        
        this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());
        
        Enumeration<String> e = currUser.getLibrary().getBorrowMap(currUser).keys();
        Vector<String> v = new Vector<String>();
        while(e.hasMoreElements())
        {
            String s = e.nextElement();
	    System.out.println(s);
        
            v.add(s + currUser.getLibrary().getBorrowMap(currUser).get(s));
        }
        this.permList.setListData(v.toArray());
        
        Enumeration<String> allUsers = uMngr.getUsers().keys();
        Vector<String> allUsersVector = new Vector<String>();
        while(allUsers.hasMoreElements())
        {
            String s = allUsers.nextElement();
            if(!s.equals(currUser.getName()))
                allUsersVector.add(s);
        }
        this.AllOnlineUsersList.setListData(allUsersVector.toArray());
        } else
        {
            JOptionPane.showMessageDialog(this, "Invalid username or password", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        this.tabs.setVisible(false);
        this.loginPane.setVisible(true);
        this.logoutPane.setVisible(false);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        User friend = (User)invitesList.getSelectedValue();
        if(friend == null)
        {
            JOptionPane.showMessageDialog(this, "Nothing selected");
        } else
        {
            currUser.addFriend(friend);
            friend.addFriend(currUser);
            currUser.removeInvite(friend);
            this.invitesList.setListData(currUser.getInvites().toArray());
            friendsList.setListData(currUser.getFriendList().toArray());
        }
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void removeFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFriendButtonActionPerformed
//        System.out.println(friendsList.getSelectedValue());
        User friend = uMngr.findUser((String)friendsList.getSelectedValue());
        currUser.removeFriend(friend);
        friend.removeFriend(currUser);
        friendsList.setListData(currUser.getFriendList().toArray());
    }//GEN-LAST:event_removeFriendButtonActionPerformed

    private void declineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineButtonActionPerformed
        currUser.removeInvite((User)invitesList.getSelectedValue());
        this.invitesList.setListData(currUser.getInvites().toArray());
    }//GEN-LAST:event_declineButtonActionPerformed

private void createPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlaylistButtonActionPerformed
    List<Song> songs = ownedList.getSelectedValuesList();
	if(!songs.isEmpty())
	{
		String pname = JOptionPane.showInputDialog("Enter playlistName");
		if(pname != null)
		{
			if(!pname.isEmpty())
			{
				currUser.getLibrary().createPlaylist(pname, songs);
				Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
				Vector<String> tmp = new Vector<String>();
				for(Map.Entry<String, Library> entry: playlists.entrySet())
				{
					tmp.add(entry.getKey());
					List<Song> tmpSongs = entry.getValue().owned();
					for(Song s : tmpSongs)
					{
						tmp.add("  " + s.toString());
					}
				}   
				playListList.setListData(tmp.toArray());
			} else
			{
				JOptionPane.showMessageDialog(this, "Playlist name cannot be empty");
			}
		}
	} else
	{
		JOptionPane.showMessageDialog(this, "You must select at least one song to add to playlist.");
	}
}//GEN-LAST:event_createPlaylistButtonActionPerformed

private void deletePlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlaylistButtonActionPerformed
//    String p = JOptionPane.showInputDialog("Enter playlist name");
//    Library playlist = currUser.getLibrary().getPlaylist(p);
//    if(playlist != null)
//    {
//        currUser.getLibrary().removePlaylist(p);
//    } else
//    {
//        JOptionPane.showMessageDialog(this, "Invalid playlist name");
//    }

	JPanel panel = new JPanel();

	JList list = new JList();
	Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
	Vector<String> tmp = new Vector<String>();
	for(Map.Entry<String, Library> entry: playlists.entrySet())
	{
		tmp.add(entry.getKey());
	}

	if(!tmp.isEmpty())
	{
		list.setListData(tmp.toArray());
		panel.add(list);

		int result = JOptionPane.showOptionDialog(this, panel, "Delete playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,null);

		if(result == JOptionPane.OK_OPTION)
		{
			String p = (String)list.getSelectedValue();
			currUser.getLibrary().removePlaylist(p);
		}
	}
    
    Vector<String> tmp2 = new Vector<String>();
    for(Map.Entry<String, Library> entry: playlists.entrySet())
    {
        tmp2.add(entry.getKey());
        List<Song> tmpSongs = entry.getValue().owned();
        for(Song s : tmpSongs)
        {
            tmp2.add("  " + s.toString());
        }
    }   
    playListList.setListData(tmp2.toArray());
}//GEN-LAST:event_deletePlaylistButtonActionPerformed

private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
    String search = searchInput.getText();
    if(allLibrariesRadio.isSelected())
    {
        Hashtable<String, User> users = uMngr.getUsers();
        Set<String> keys = users.keySet();
//        Vector<String> tmp = new Vector<String>();
        Vector<Song> tmp = new Vector<Song>();
        for(String key : keys)
        {
            User u = uMngr.findUser(key);
            if(u.getPerm() != PermType.NONE || (u.getPerm() == PermType.FRIENDS && !currUser.isFriendsWith(u)))
            {
    //            tmp.add(key);

                List<Song> owned = u.getLibrary().owned();
                for(Song s : owned)
                {
                    if(s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase()))
                    {
    //                    tmp.add(" " + s.toString());
                        tmp.add(s);
                    }
                }
            }
            this.searchList.setListData(tmp.toArray());
        }
    } else if(friendsLibrariesRadio.isSelected())
    {
        List<User> friends = currUser.getFriends();
        Vector<Song> tmp = new Vector<Song>();
        for(User u : friends)
        {
//            tmp.add(u.getName());
            if(u.getPerm() != PermType.NONE)
            {
                List<Song> owned = u.getLibrary().owned();
                for(Song s : owned)
                {
                    if(s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase()))
                    {
//                    tmp.add(" " + s.toString());
                        tmp.add(s);
                    }
                }
            }
            this.searchList.setListData(tmp.toArray());
        }
    } else if(ownLibraryRadio.isSelected())
    {
        Vector<Song> tmp = new Vector<Song>();
        List<Song> owned = currUser.getLibrary().owned();
        for(Song s : owned)
        {
            if(s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase()))
            {
//                tmp.add(" " + s.toString());
                tmp.add(s);
            }
        }
        this.searchList.setListData(tmp.toArray());
    }
}//GEN-LAST:event_searchButtonActionPerformed

private void addSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongButtonActionPerformed
    JTextField songName = new JTextField();
    JTextField artist = new JTextField();
    JTextField genre = new JTextField();
    JTextField album = new JTextField();
    JTextField year = new JTextField();
    Object[] inputs = {
        "Name:", songName,
        "Artist", artist,
        "Genre", genre,
        "Album", album,
        "Year", year
    };
    JOptionPane.showMessageDialog(this, inputs, "Add Song", JOptionPane.QUESTION_MESSAGE);
    while(songName.getText().equals("") || artist.getText().equals(""))
    {
        JOptionPane.showMessageDialog(this, "Name and artist cannot be blank", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        JOptionPane.showMessageDialog(this, inputs, "Add Song", JOptionPane.QUESTION_MESSAGE);
    }
    String[][] songMeta =  {
	{"name", songName.getText()},
	{"artist", artist.getText()},
	{"genre", genre.getText()},
        {"album", album.getText()},
        {"year", year.getText()}
    };
    currUser.getLibrary().addSong(new Song(new Metadata(songMeta)));
    ownedList.setListData(currUser.getLibrary().owned().toArray());
}//GEN-LAST:event_addSongButtonActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    List<Song> selected = ownedList.getSelectedValuesList();
    for(Song s : selected)
    {
        currUser.getLibrary().removeSong(s);
    }
    ownedList.setListData(currUser.getLibrary().owned().toArray());
}//GEN-LAST:event_jButton2ActionPerformed

private void songPermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songPermButtonActionPerformed
    List<Song> selected = ownedList.getSelectedValuesList();
        for(Song s : selected)
        {
			JPanel panel = new JPanel();
			JList friendList = new JList();
			friendList.setListData(currUser.getFriends().toArray());
			JRadioButton approval = new JRadioButton("Approval Required");
			approval.setSelected(true);
			JRadioButton noApproval = new JRadioButton("No Approval");
			JRadioButton notBorrowable = new JRadioButton("Not Borrowable");
//            JTextField friendName = new JTextField();
            JTextField limit = new JTextField();
            JTextField plimit = new JTextField();
            Object[] inputs = {
//                "Friend Name", friendName,
                "Borrow Limit", limit,
                "Play Limit", plimit
            };
			panel.add(friendList);
			panel.add(approval);
			panel.add(noApproval);
			panel.add(notBorrowable);
			JOptionPane.showOptionDialog(this, panel, "Select permission type", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			User friend = (User)friendList.getSelectedValue();
            JOptionPane.showMessageDialog(this, inputs);
					if(!limit.getText().matches("[-+]?\\d*\\.?\\d+") || !plimit.getText().matches("[-+]?\\d*\\.?\\d+"))
					{
						JOptionPane.showMessageDialog(this, "Invalid limit");
					} else
					{
	//                    System.out.println(Integer.parseInt(limit.getText()));
						if(approval.isSelected())
						{
							currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.APPROVE);
						} else if(noApproval.isSelected())
						{
							currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.LIMIT);
						} else //not borrowable
						{
							currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.NO);
						}
						currUser.getLibrary().setPlayLimit(friend.toString(), s.getName(), Integer.parseInt(plimit.getText()));
					}
				
//            currUser.getLibrary().set
        
//            currUser.getLibrary().set
        
    
//            currUser.getLibrary().set
        
    }
}//GEN-LAST:event_songPermButtonActionPerformed

private void anyoneRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anyoneRadioActionPerformed
    currUser.setPerm(PermType.ALL);
}//GEN-LAST:event_anyoneRadioActionPerformed

private void friendsOnlyRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendsOnlyRadioActionPerformed
    currUser.setPerm(PermType.FRIENDS);
}//GEN-LAST:event_friendsOnlyRadioActionPerformed

private void noAvailabilityRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noAvailabilityRadioActionPerformed
    currUser.setPerm(PermType.NONE);
    
}//GEN-LAST:event_noAvailabilityRadioActionPerformed

private void borrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowButtonActionPerformed
    List<Song> selected = searchList.getSelectedValuesList();
    for(Song s : selected)
    {
//        System.out.println(s.toString());
        List<User> friends = currUser.getFriends();
        for(User f : friends)
        {
            if(f.getLibrary().isOwned(s))
            {
                if(f.getLibrary().checkIfBorrowable(currUser, s))
                {
                    
                    if(f.getLibrary().isLIMIT(f.getLibrary().getSongBorrowLimit(currUser, s).fst))
                    {
                        if(f.getLibrary().loaned().contains(s))
			{
                            JOptionPane.showMessageDialog(this, "You have been added to wait list");
			} else
			{
				JOptionPane.showMessageDialog(this, "Borrow successful!");
			}
                        f.getLibrary().sendBorrow(currUser, s);
                    } else
                    {
                        f.getLibrary().createBorrowRequest(currUser, s);
                        JOptionPane.showMessageDialog(this, "Request being sent to " + f);
                    }
                } else
                    JOptionPane.showMessageDialog(this, "You do not have the permissions to borrow " + s.getName());
            }
        }
    }
    this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
//    this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
    
}//GEN-LAST:event_borrowButtonActionPerformed

private void allowBorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowBorrowButtonActionPerformed
    List<Pair<User, Song>> selected = borrowRequestList.getSelectedValuesList();
    for(Pair<User, Song> p : selected)
    {
        currUser.getLibrary().acceptBorrowRequest(p);
    }
    this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
    this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());

    this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());
}//GEN-LAST:event_allowBorrowButtonActionPerformed

private void denyBorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyBorrowButtonActionPerformed
    List<Pair<User, Song>> selected = borrowRequestList.getSelectedValuesList();
    for(Pair<User, Song> p : selected)
    {
        currUser.getLibrary().removeBorrowRequest(p);
    }
    this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());
}//GEN-LAST:event_denyBorrowButtonActionPerformed

private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    if(currUser.getLibrary().isPlayingSong())
    {
        JOptionPane.showMessageDialog(this, "You are already playing a song");
    } else
    {
        String[] buttons = {"Play owned song", "Play borrowed song"};
        int returnVal = JOptionPane.showOptionDialog(this, "Play from where?", "Play Song", 0, 0, null, buttons, buttons[0]);
        if(returnVal == 0)
        {
            Song selected = (Song)ownedList.getSelectedValue();
	    if(!currUser.getLibrary().loaned().contains(selected))
	    {
		    if(selected == null)
		    {
			JOptionPane.showMessageDialog(this, "No song selected");
		    } else
		    {
			currUser.getLibrary().play(selected);
			currentlyPlayingLabel.setText("Currently Playing: " + selected.getName());
		    }
	    } else 
	    {
		    JOptionPane.showMessageDialog(this, "This song is loaned");
	    }
        } else
        {
            Song selected = (Song)borrowedList.getSelectedValue();
            if(selected == null)
            {
                JOptionPane.showMessageDialog(this, "No song selected");
            } else
            {
                currUser.getLibrary().play(selected);
                currentlyPlayingLabel.setText("Currently Playing: " + selected.getName());
            }
        }
    }
}//GEN-LAST:event_playButtonActionPerformed

private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    if(!currUser.getLibrary().isPlayingSong())
    {
        JOptionPane.showMessageDialog(this, "You are not playing anything");
    } else 
    {
        currUser.getLibrary().stop();
        currentlyPlayingLabel.setText("");
    }
    this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
}//GEN-LAST:event_stopButtonActionPerformed

private void takeBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeBackButtonActionPerformed
    Song selected = (Song)loanedList.getSelectedValue();
    if(selected == null)
    {
        JOptionPane.showMessageDialog(this, "Nothing Selected");
    } else
    {
        List<User> friends = currUser.getFriends();
        for(User f : friends)
        {
            if(f.getLibrary().borrowed().contains(selected))
                mMngr.takeBack(f, selected);
            
        }
//        System.out.println(selected);
        
        
    }
    this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
}//GEN-LAST:event_takeBackButtonActionPerformed

    private void addAsFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsFriendButtonActionPerformed
        List<String> users = AllOnlineUsersList.getSelectedValuesList();
        for(String u : users)
        {
            User friend = uMngr.findUser(u);
            if(friend != null)
            {
				if(currUser.isFriendsWith(friend))
				{
					JOptionPane.showMessageDialog(this, "You are already friends with " + friend);
				} else
				{
					currUser.sendInvite(friend);
					JOptionPane.showMessageDialog(this, "Invite sent to " + friend);
				}
            } else
            {
                JOptionPane.showMessageDialog(this, "User does not exist");
            }
        }
    }//GEN-LAST:event_addAsFriendButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        JPanel panel = new JPanel();

        JRadioButton songNameRadio = new JRadioButton("Song Name");
        JRadioButton albumRadio = new JRadioButton("album");
        JRadioButton artistRadio = new JRadioButton("artist");
        
        panel.add(songNameRadio);
        panel.add(albumRadio);
        panel.add(artistRadio);
        
	int result = JOptionPane.showOptionDialog(this, panel, "Sort songs by: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        
	if(result == JOptionPane.OK_OPTION)
	{
		if(songNameRadio.isSelected())
		{
			this.ownedList.setListData(currUser.getLibrary().toSortedList("name").toArray());
		} else if(albumRadio.isSelected())
		{
			this.ownedList.setListData(currUser.getLibrary().toSortedList("album").toArray());
		} else if(artistRadio.isSelected())
		{
			this.ownedList.setListData(currUser.getLibrary().toSortedList("artist").toArray());
		}
	}
    }//GEN-LAST:event_sortButtonActionPerformed

        private void addSongsToPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongsToPlaylistActionPerformed
        	JPanel panel = new JPanel();

			JList list = new JList();
			Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
			Vector<String> tmp = new Vector<String>();
			for(Map.Entry<String, Library> entry: playlists.entrySet())
			{
				tmp.add(entry.getKey());
			}   
			List<Song> songsToAdd = ownedList.getSelectedValuesList();
			if(!songsToAdd.isEmpty())
			{
				if(!tmp.isEmpty())
				{
					list.setListData(tmp.toArray());
					panel.add(list);

					int result = JOptionPane.showOptionDialog(this, panel, "Add to playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,null);

					if(result == JOptionPane.OK_OPTION)
					{
						String Playlist = (String)list.getSelectedValue();
						for(Song s : songsToAdd)
						{
							currUser.getLibrary().getPlaylist(Playlist).addSong(s);
						}
					}

					playlists = currUser.getLibrary().getPlayLists();
					Vector<String> tmp2 = new Vector<String>();
					for(Map.Entry<String, Library> entry: playlists.entrySet())
					{
						tmp2.add(entry.getKey());
						List<Song> tmpSongs = entry.getValue().owned();
						for(Song s : tmpSongs)
						{
							tmp2.add("  " + s.toString());
						}
					}  
					this.playListList.setListData(tmp2.toArray());
				} else 
				{
					JOptionPane.showMessageDialog(this, "No playlists available.");
				}
			} else
			{
				JOptionPane.showMessageDialog(this, "No songs selected.");
			}
        }//GEN-LAST:event_addSongsToPlaylistActionPerformed

    private void removeSongFromPlayListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSongFromPlayListButtonActionPerformed
	    JPanel panel = new JPanel();

		JList list = new JList();
		Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
		Vector<String> tmp = new Vector<String>();
		for(Map.Entry<String, Library> entry: playlists.entrySet())
		{
			tmp.add(entry.getKey());
		}

		if(!tmp.isEmpty())
		{
			list.setListData(tmp.toArray());
			panel.add(list);

			int result = JOptionPane.showOptionDialog(this, panel, "Remove from playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,null);

			if(result == JOptionPane.OK_OPTION)
			{
				Library playlist = currUser.getLibrary().getPlaylist((String)list.getSelectedValue());
				JPanel panel2 = new JPanel();

				JList list2 = new JList();
				list2.setListData(playlist.owned().toArray());
				panel2.add(list2);

				int result2 = JOptionPane.showOptionDialog(this, panel2, "Select Songs", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
				if(result2 == JOptionPane.OK_OPTION)
				{
				    playlist.removeSong((Song)list2.getSelectedValue());
				    
				    Map<String, Library> allPlaylists = currUser.getLibrary().getPlayLists();
				    Vector<String> tmp2 = new Vector<String>();
				    for(Map.Entry<String, Library> entry: allPlaylists.entrySet())
				    {
						tmp2.add(entry.getKey());
						List<Song> tmpSongs = entry.getValue().owned();
						for(Song s : tmpSongs)
						{
						    tmp2.add("  " + s.toString());
						}
				    }   
				    playListList.setListData(tmp2.toArray());
					
				}
			}
		} else
		{
			JOptionPane.showMessageDialog(this, "You have no playlists currently.");
		}
    }//GEN-LAST:event_removeSongFromPlayListButtonActionPerformed

    private void browseFriendsLibraryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFriendsLibraryButtonActionPerformed
        JPanel panel = new JPanel();
		JList list = new JList();

		User friend = uMngr.findUser((String)friendsList.getSelectedValue());
		if(friend != null)
		{
			if(friend.getPerm() != PermType.NONE)
			{
				list.setListData(friend.getLibrary().owned().toArray());
				panel.add(list);
				JOptionPane.showOptionDialog(this, panel, friend + "'s Library", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			} else {
				JOptionPane.showMessageDialog(this, "You don't have permissions to view " + friend + "'s library.");
			}
		}

    }//GEN-LAST:event_browseFriendsLibraryButtonActionPerformed

    private void songDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songDetailsButtonActionPerformed
		JPanel panel = new JPanel();
        JRadioButton owned = new JRadioButton("owned song");
		JRadioButton borrowed = new JRadioButton("borrowed song");
		JRadioButton loaned = new JRadioButton("loaned song");

		panel.add(owned);
		panel.add(borrowed);
		panel.add(loaned);

		int result = JOptionPane.showOptionDialog(this, panel, "Get song details from:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
		if(result == JOptionPane.OK_OPTION)
		{
			if(owned.isSelected())
			{
				Song s = (Song)ownedList.getSelectedValue();

				JPanel panel2 = new JPanel();
				JList list = new JList();

				Vector<String> tmp = new Vector<String>();

				tmp.add("Name: " + s.getName());
				tmp.add("Artist: " + s.get("artist"));
				tmp.add("Album: " + s.get("album"));
				tmp.add("Genre: " + s.get("genre"));
				tmp.add("Composer: " + s.get("composer"));
				tmp.add("Year: " + s.getYear());

				list.setListData(tmp.toArray());
				panel2.add(list);

				JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			} else if(borrowed.isSelected())
			{
				Song s = (Song)borrowedList.getSelectedValue();

				JPanel panel2 = new JPanel();
				JList list = new JList();

				Vector<String> tmp = new Vector<String>();

				tmp.add("Name: " + s.getName());
				tmp.add("Artist: " + s.get("artist"));
				tmp.add("Album: " + s.get("album"));
				tmp.add("Genre: " + s.get("genre"));
				tmp.add("Composer: " + s.get("composer"));
				tmp.add("Year: " + s.getYear());
				tmp.add("Borrowed from: " + currUser.getLibrary().getOwnerofBorrowed(s));
				tmp.add("Plays left: " + currUser.getLibrary().getPlaysLeftOfBorrowed(s));

				list.setListData(tmp.toArray());
				panel2.add(list);

				JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			} else if(loaned.isSelected())
			{
				Song s = (Song)loanedList.getSelectedValue();

				JPanel panel2 = new JPanel();
				JList list = new JList();

				Vector<String> tmp = new Vector<String>();

				tmp.add("Name: " + s.getName());
				tmp.add("Artist: " + s.get("artist"));
				tmp.add("Album: " + s.get("album"));
				tmp.add("Genre: " + s.get("genre"));
				tmp.add("Composer: " + s.get("composer"));
				tmp.add("Year: " + s.getYear());
//				tmp.add("Loaned to: " + currUser.getLibrary().)

				list.setListData(tmp.toArray());
				panel2.add(list);

				JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			} else
			{
				JOptionPane.showMessageDialog(this, "No list selected.");
			}
		}
		
    }//GEN-LAST:event_songDetailsButtonActionPerformed

	private void parseFile(String file)
    {
        try
        {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            HashMap<User, String[]> friendsToAdd = new HashMap<User, String[]>();
            
            while((line = reader.readLine()) != null)
            {
                //remove white space
                line = line.replaceAll("\t", "");
                line = line.replaceAll(" ", "");
                
                if(line.isEmpty()) //break if line is empty
                    break;

                //username
                int lowerBound = 0;
                int upperBound = line.indexOf(',');
                String user = line.substring(lowerBound, upperBound);
//                System.out.println(user);

                //password
                lowerBound = ++upperBound;
                upperBound = line.indexOf('[', lowerBound);
                String pw = line.substring(lowerBound, upperBound);
//                System.out.println(pw);

                //create user
                User u = new User(user, pw);
                uMngr.addUser(u);

                //song metadata
                lowerBound = ++upperBound;
                upperBound = line.indexOf(']', lowerBound);
                String songsFull = line.substring(lowerBound, upperBound);
                String[] songs = songsFull.split("\\|");
                for(int i = 0; i < songs.length; ++i)
                {
                    String[] data = songs[i].split(",");
                    Metadata m = new Metadata();

                    //create metadata
                    if(!data[0].isEmpty() || !data[1].isEmpty())
                    {
                        m.put("name", data[0]);
                        m.put("artist", data[1]);
                        m.put("album", data[2]);
                        m.put("year", data[3]);
                        m.put("composer", data[4]);
                        m.put("genre", data[5]);
                    }
                    
                    //create song
                    Song s = new Song(m);
//                    mMngr.getGlobalLibrary().addSong(s);
                    u.getLibrary().addSong(s);
                
                }

                //friends
                lowerBound = upperBound + 2;
                upperBound = line.indexOf(')', lowerBound);
                String friendsFull = line.substring(lowerBound, upperBound);
                String[] friends = friendsFull.split(",");
                
                //Not all users are loaded yet
                //Wait to add friends
                friendsToAdd.put(u, friends);
            }
            
            reader.close();
            
            for(Map.Entry<User, String[]> u : friendsToAdd.entrySet())
            {
                for(int i = 0; i < u.getValue().length; ++i)
                {
                    User friend = uMngr.findUser(u.getValue()[i]);
                    if(friend != null)
                        u.getKey().addFriend(friend);
                }
            }

        } catch(Exception e)
        {
            e.printStackTrace();
        }
    }
            public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UI ui = new UI();
                ui.setTitle("Music Sharing Application");
                ui.parseFile(args[0]);
                ui.setLocationRelativeTo(null);
                ui.setVisible(true);
                ui.tabs.setVisible(false);
                ui.logoutPane.setVisible(false);
                
            }
        });
    }
//    
//    public void printLibrary() {
//    	printLibrary(this.currentUser);
//    }
//    
//    public void printLibrary(User u) {
//    	System.out.println(u.getName() + "'s Library \n----------------------------------------");
//    	
//    	for (Song s : u.getLibrary())
//    		System.out.println(s);
//    	
//    	System.out.println();
//    }
//    
//    public User getUser() {
//    	return this.currentUser;
//    }
//    
//    public boolean loggedIn() {
//    	if (currentUser != null) return true;
//    	else return false;
//    }
//    
//    public boolean doLogin(String username, String password) 
//    {
//    	User user = uMngr.findUser(username);
//    	
//    	if (user.checkPassword(password)) {
//    		this.currentUser = user;
//    		return true;
//    	}
//    	
//    	return false;
//    }


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JList AllOnlineUsersList;
        private javax.swing.JButton acceptButton;
        private javax.swing.JButton addAsFriendButton;
        private javax.swing.JButton addSongButton;
        private javax.swing.JButton addSongsToPlaylist;
        private javax.swing.JRadioButton allLibrariesRadio;
        private javax.swing.JLabel allOnlineUsersLabel;
        private javax.swing.JPanel allUsersPanel;
        private javax.swing.JButton allowBorrowButton;
        private javax.swing.JRadioButton anyoneRadio;
        private javax.swing.JButton borrowButton;
        private javax.swing.JList borrowRequestList;
        private javax.swing.JPanel borrowRequestPanel;
        private javax.swing.JLabel borrowedLabel;
        private javax.swing.JList borrowedList;
        private javax.swing.JButton browseFriendsLibraryButton;
        private javax.swing.JButton createPlaylistButton;
        private javax.swing.JLabel currentlyPlayingLabel;
        private javax.swing.JButton declineButton;
        private javax.swing.JButton deletePlaylistButton;
        private javax.swing.JButton denyBorrowButton;
        private javax.swing.JButton downloadSongButton;
        private javax.swing.JPanel friendRequestPanel;
        private javax.swing.JRadioButton friendsLibrariesRadio;
        private javax.swing.JList friendsList;
        private javax.swing.JRadioButton friendsOnlyRadio;
        private javax.swing.JPanel friendsPanel;
        private javax.swing.JList invitesList;
        private javax.swing.JButton jButton2;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane10;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JScrollPane jScrollPane4;
        private javax.swing.JScrollPane jScrollPane5;
        private javax.swing.JScrollPane jScrollPane6;
        private javax.swing.JScrollPane jScrollPane7;
        private javax.swing.JScrollPane jScrollPane8;
        private javax.swing.JScrollPane jScrollPane9;
        private javax.swing.ButtonGroup libraryAvailabilityGroup;
        private javax.swing.JPanel libraryPanel;
        private javax.swing.JLabel loanedLabel;
        private javax.swing.JList loanedList;
        private javax.swing.JButton loginButton;
        private javax.swing.JPanel loginPane;
        private javax.swing.JButton logoutButton;
        private javax.swing.JPanel logoutPane;
        private javax.swing.JRadioButton noAvailabilityRadio;
        private javax.swing.JRadioButton ownLibraryRadio;
        private javax.swing.JLabel ownedLabel;
        private javax.swing.JList ownedList;
        private javax.swing.JPasswordField passwordInput;
        private javax.swing.JList permList;
        private javax.swing.JButton playButton;
        private javax.swing.JList playListList;
        private javax.swing.JPanel playlistPanel;
        private javax.swing.JButton removeFriendButton;
        private javax.swing.JButton removeSongFromPlayListButton;
        private javax.swing.JButton searchButton;
        private javax.swing.ButtonGroup searchGroup;
        private javax.swing.JTextField searchInput;
        private javax.swing.JList searchList;
        private javax.swing.JPanel searchPanel;
        private javax.swing.JButton songDetailsButton;
        private javax.swing.JButton songPermButton;
        private javax.swing.ButtonGroup songPermGroup;
        private javax.swing.JPanel songPermPanel;
        private javax.swing.JButton sortButton;
        private javax.swing.JButton stopButton;
        private javax.swing.JTabbedPane tabs;
        private javax.swing.JButton takeBackButton;
        private javax.swing.JLabel titleLabel;
        private javax.swing.JPanel trendingPanel;
        private javax.swing.JTextField usernameInput;
        // End of variables declaration//GEN-END:variables
}

